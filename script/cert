#!/usr/bin/env bash

set -e

function plz_install_mkcert {
  echo "Please make sure \`mkcert\` and `nss` are installed. For example, on macOS:"
  echo ""
  echo "  brew install mkcert nss"
  echo ""
  exit 1
}

which mkcert >/dev/null || plz_install_mkcert

DOMAIN="${1}"
if [ "$DOMAIN" = "" ]
then
  echo "Please specify a domain (e.g. \`test.localhost\`)"
  exit 1
fi


if [[ "${DOMAIN}" =~ ^[A-za-z0-9\\-]+(\.[A-za-z0-9\\-]+)*$ ]]; then
  echo "Creating a cert for domain: ${DOMAIN}"
else
  echo "Please specify a domain in ASCII."
  echo "Convert to \`xn--\` format if needed."
  exit 1
fi

cert_dir="${HOME}/.data/servecert/certs/${DOMAIN}"
mkdir -p ${cert_dir}
cd ${cert_dir}

# IMPORTANT: Here, we tell `mkcert` to work only in the cert folder for the rest
# of this script. This prevents messing with other uses of `mkcert` on the
# system.
export CAROOT="$(pwd)"

root_ca_key_file=rootCA-key.pem
root_ca_cert_file=rootCA.pem

if [ -f ${root_cert_file} ]
then
  # Remove old CA, since we don't have the key from previous runs (see below).
  echo "----------------"
  echo "Detected an old root CA."
  echo "Attempting to remove the old CA before generating a new one."
  echo "This may ask for your permission to modify the operating system."
  echo "If the old CA is not installed, this may show an error (which you can ignore)."
  echo ""
  mkcert -uninstall || true
  rm ${root_ca_cert_file}
  rm -f ${root_ca_key_file}
fi

echo "----------------"
echo "Creating a root CA and using it to issue a cert for local test domains."
echo "We use \`mkcert\` for this, which may show warnings,"
echo "because we are generating certificates without trusting them yet."
echo ""
mkcert -install "${DOMAIN}"

echo "----------------"
echo "Throwing away the root CA key, so that no one can use it to sign certs"
echo "that can intercept traffic for additional domains."
echo ""
rm -f ${root_ca_key_file}

echo "----------------"
echo "Root CA and certificate generated."
